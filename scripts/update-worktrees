#!/bin/sh
# vim: ft=sh: sw=2:
# Author: Gennady Bystritsky (bystr@mac.com)


main () {
  parse_command_line "${@}"

  setup_git_environment
  ensure_git_workspace

  REMOTE="${O_REMOTE:-no}"
  MERGE="${O_MERGE:-no}"
  PUSH="${O_PUSH:-no}"

  restore_dry_run=no

  is_dry_run && is_explicit_runmode || {
    [ "${MERGE}" = no ] && [ "${PUSH}" = no ] || {
      disable_dry_run
    }

    is_dry_run && [ "${REMOTE}" = yes ] && {
      restore_dry_run=yes
      disable_dry_run
    }
  }

  report_dry_run

  [ "${REMOTE}" = yes ] && {
    run git remote update --prune
  }

  [ "${restore_dry_run}" = yes ] && {
    ensure_dry_run
  }

  is_dry_run || [ "${MERGE}" = no ] && [ "${PUSH}" = no ] && {
    MERGE=yes
    PUSH=yes
  }

  worktrees_without_branches | while read worktree; do
    (cd "${worktree}" && sync_branch)
  done
}

local_with_remote_if_current_and_differ () {
  git bbs "${@}" | awk '$1 == "*" {print $(2), $(3), $(NF)}'
}

sync_branch () {
  set -- `local_with_remote_if_current_and_differ --no-color`
  [ ${#} -ne 3 ] && return

  reason=${2}
  local_no_color=${1}
  remote_no_color=${3}

  set -- `local_with_remote_if_current_and_differ --color`
  [ ${#} -ne 3 ] && return

  local_color=${1}
  remote_color=${3}

  pwd="pwd"

  upstream=`git rev-parse --abbrev-ref @{u} 2>&5` || {
    reason=`echo "${reason}" | tr '[a-z]' '[A-Z]'`

    "${pwd}"
    indent_output_from warning 'Not a valid upstream' "${local_no_color}" "${reason}" "${remote_color}"
    pwd="true"

    return
  }

  [ "${upstream}" != "${remote_no_color}" ] && {
    "${pwd}"
    indent_output_from warning 'Ustream mismatch (TODO: check stop justified)' "${local_no_color}" "${upstream}" "${remote_color}"
    pwd="true"

    # TODO: Added return, check that it is really needed instead of just
    # proceeding as before.
    #
    return
  }

  [ "${MERGE}" = yes ] && {
    count_remote_changes
    change_count="${?}"

    [ "${change_count}" = 0 ] || {
      "${pwd}"
      (indent_output_from merge_if_clean "${change_count}" "${local_color}" "${remote_color}")
      pwd="true"
    }
  }

  [ "${PUSH}" = yes ] && {
    count_local_changes
    change_count="${?}"

    [ "${change_count}" = 0 ] || {
      "${pwd}"
      (indent_output_from push "${change_count}" "${local_color}" "${remote_color}")
      pwd="true"
    }
  }
}

count_remote_changes () {
  return `number_of_revisions ..@{u}`
}

count_local_changes () {
  return `number_of_revisions @{u}..`
}

number_of_revisions () {
  git log --oneline "${@}" | head -100 | wc -l
}

ensure_clean_workspace () {
  return `git -c color.status=always status -s 2>&1 | tee /dev/stderr | head -100 | wc -l`
}

merge_if_clean () {
  info "${2} <=[`make_number_label ${1}`] ${3}"

  ensure_clean_workspace || {
    warning "Detected ${?} changed or untracked, not merging."
    return 2
  }

  run_dangerous git merge --ff-only
}

push () {
  info "${2} [`make_number_label ${1}`]=> ${3}"

  [ "${O_PUSH}" = yes ] || is_dry_run || {
    warning 'Specify option --push (-p) to perform push action.'
    ensure_dry_run
  }

  run_dangerous git push
}

make_number_label () {
  label="${1}"

  [ "${label}" -gt 99 ] && {
    label="99+"
  }

  echo "${label}"
}

unset O_REMOTE O_PUSH O_MERGE

process_option () {
  option=${1}
  argument=${2}

  case "${option}" in
    --remote | -r )
      O_REMOTE=yes
    ;;

    --push | -p )
      O_PUSH=yes
    ;;

    --merge | -m )
      O_MERGE=yes
    ;;

    *)
      process_standard_option "${@}"
    ;;
  esac
}

process_parameters () {
  return ${#}
}

options_usage () {
  echo "`standard_options_usage`[--remote|-r][--push|-p][--merge|-m]"
}

. `type "${0}" | sed 's/^.* //' | xargs dirname`/core.lib.sh
start import=git,ws "${@}"
