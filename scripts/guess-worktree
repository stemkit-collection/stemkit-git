#!/bin/sh
# vim: ft=sh: sw=2:
# Author: Gennady Bystritsky (bystr@mac.com)

DESCEND=yes
LIST=no

unset OFFSET SAFE

main () {
  parse_command_line "${@}"
  setup_git_environment

  ROOT=`git ws 2>&5` || ROOT=`git -C "${script_folder}" ws` || {
    return 2
  }

  [ "${matchers:-no}" = no -a "${LIST}" = no ] && {
    echo "${ROOT}"
    return 0
  }

  [ "${DESCEND}" = yes ] && {
    OFFSET=`git from-top 2>&5`
  }

  cd "${ROOT}" || exit "${?}"

  available=`collect_available`
  matching=`output_matching ${available}`

  [ "${LIST}" = no ] || {
    [ "${LIST}" = worktrees ] && {
      worktrees_for_branches ${matching}
      return 0
    }

    output_each ${matching}
    return 0
  }

  set -- ${matching}

  case ${#} in
    1)
      target=`branch_to_worktree "${1}"`

      [ "${OFFSET:-./}" = ./ ] || {
        deep_target=`echo "${target}/${OFFSET}" | sed 's%/$%%'`
        [ -d "${deep_target}" ] && {
          echo "${deep_target}"
          return 0
        }
      }

      echo "${target}"
      return 0
    ;;

    0)
      error 'No branches for matchers' ${matchers}
      info 'Available branches:'

      indent_output_from worktrees_for_branches ${available} 1>&2
    ;;

    *)
      error 'Ambiguous branches for matchers' ${matchers}
      info 'Matching branches:'

      indent_output_from worktrees_for_branches ${matching} 1>&2
    ;;
  esac

  [ "${SAFE}" = yes ] && echo .
  return 3
}

output_each () {
  for item in "${@}"; do
    echo "${item}"
  done
}

output_matching () {
  for item in "${@}"; do
    check_match "${item}" && echo "${item}"
  done
}

collect_available () {
  branches_without_worktrees | sort
}

check_match () {
  for matcher in ${matchers}; do
    case "${1}" in
      *${matcher}* )
        continue
      ;;
    esac

    return 1
  done

  return 0
}

process_option () {
  option=${1}
  argument=${2}

  case "${option}" in
    --top | -t )
      DESCEND=no
    ;;

    --worktrees | -w )
      LIST=worktrees
    ;;

    --list | -l )
      LIST=branches
    ;;

    --safe | -s )
      SAFE=yes
    ;;

    *)
      process_standard_option "${@}"
    ;;
  esac
}

process_parameters () {
  matchers="${@}"
}

options_usage () {
  echo "`standard_options_usage` [--top|-t][--list|-l][--safe|-s][<matcher>...]"
}

. `type "${0}" | sed 's/^.* //' | xargs dirname`/core.sh.lib
start import=git,ws "${@}"
