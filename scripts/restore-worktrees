#!/bin/sh
# vim: ft=sh: sw=2:
# Author: Gennady Bystritsky (bystr@mac.com)

unset DIRECTORY OFFSET

GIT_CONFIG_P_DIRECTORY=stm.workspaces.directory
GIT_CONFIG_P_OFFSET=stm.workspaces.offset

main () {
  parse_command_line "${@}"
  setup_git_environment

  ensure_git_workspace
  report_simulation_mode

  run git worktree prune

  process_branches `git branch --no-color | grep -v '^[*]'`
}

process_branches () {
  for branch in "${@}"; do
    (echo "${branch}" | egrep -q '^([0-9]+[.])|[#@=+%]') && {
      info "Ignored for prefix" "${branch}"
      continue
    }

    make_worktree ${branch} || {
      warning 'Problems detected, check prior messages.'
    }
  done
}

make_worktree () {
  top=`figure_directory`/`branch_as_path "${1}"`/`figure_offset`

  [ -e "${top}" ] && {
    info "Already exists" "${top} -> ${1}"
    return 0
  }

  run git worktree add "${top}" "${1}"
}

figure_directory () {
  value_config_or_default "${DIRECTORY}" "${GIT_CONFIG_P_DIRECTORY}" .
}

figure_offset () {
  value_config_or_default "${OFFSET}" "${GIT_CONFIG_P_OFFSET}" src
}

value_config_or_default () {
  value="${1:-${2:+`git config ${2}`}}"
  echo "${value:-${3}}"
}

process_option () {
  option=${1}
  argument=${2}

  case "${option}" in
    --directory | -d )
      DIRECTORY="${argument}"
      return 4
    ;;

    --offset | -o )
      OFFSET="${argument}"
      return 4
    ;;

    *)
      process_standard_option "${@}"
    ;;
  esac
}

process_parameters () {
  return ${#}
}

options_usage () {
  echo "`standard_options_usage`[--directory|-d <folder=.>][--offset|-o <folder=src>"
}

extra_usage_info () {
  output 2 "git-config: "${GIT_CONFIG_P_DIRECTORY}": top folder (.)"
  output 2 "git-config: "${GIT_CONFIG_P_OFFSET}": folder offset (src)"
}

. `type "${0}" | awk '{print $(NF)}' | xargs dirname`/core.sh.lib
start import=ws,git "${@}"
