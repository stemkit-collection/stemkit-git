# vim: ft=gitconfig: sw=4:

[alias]
    aa = ! git config --list | ruby -n -e '$_.scan(%r{^alias[.](.*?)\\s*=\\s*(.*)$}){|a,c|puts %q{%-4s -> %s}%[a,c]}'

    bn = ! bn=`git rev-parse --abbrev-ref --revs-only \"${1:-HEAD}\" --` && echo ${bn:-${1}} "#"
    branch-name = ! git bn

    bsl = ! echo branch:start: "#"
    branch-start-label = ! git bsl

    bsm = ! bn=\"${1:-`git bn`}\" && echo \"`git bsl`${bn}\" "#"
    branch-start-message = ! git bsm

    ensure-not-staged = ! git diff --staged --exit-code --name-status || (echo ERROR: Content found staged for commit, please reset. 1>&2 && false) "#"
    mark-branch-start = ! git ensure-not-staged && bsm=`git bsm \"${@}\"` && git commit --allow-empty -m \"${bsm}\" "#"

    make-branch = ! git checkout -b \"${1}\" \"${2:-HEAD}\" && bsm=`git bsm \"${1}\"` && git commit --allow-empty -m \"${bsm}\" "#"

    brs = ! bn=\"${1:-`git bn`}\" && bsl=`git bsl` && git rev-list -1 --first-parent --grep \"^${bsl}\" \"${bn}\" -- "#"
    branch-rev-start = ! git brs

    brr = ! bn=`git bn ${1}` && brs=`git brs \"${bn}\"` && (([ -z \"${brs}\" ] && echo ${bn}) || echo ${brs}~1..${bn}) "#"
    branch-rev-range = ! git brr

    launch-in = ! e=`git -C \"${1}\" rev-parse --local-env-vars` && unset ${e} && git -C

    ca = ! git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} commit -a
    co = ! git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} checkout

    ss = ! git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} status -s
    sb = ! git launch-in \"${GIT_PREFIX}\" ss --branch
    su = ! git launch-in \"${GIT_PREFIX}\" ss --untracked-files=all
    si = ! git launch-in \"${GIT_PREFIX}\" ss --ignored

    visualize = ! ruby -e \"puts ARGV.map{|s|s.gsub(/.*\\s.*/,&:inspect).gsub(/%C[(].+?[)]/,'')}.join(' ')\" -- git
    what = ! __sk_visualize_sk__=visualize git launch-in \"${GIT_PREFIX}\"

    log-name-wrap = ! echo \"%C(yellow dim)${1}%C(reset)%C(auto)\" "#"
    log-date-as = ! sh -c 'git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} log --date=\"format:%F %T\" --pretty=format:\"${0}\" \"${@}\"'
    log-with-header = ! sh -c 'git launch-in \"${GIT_PREFIX}\" log-date-as \"%C(auto)`printf %78s|sed s/./-/g`%+D%+h (%p) | `git log-name-wrap %cn` | %cd (%cr) ${0}\" \"${@}\"'

    labeled-rev-parse-show = ! s=`git launch-in \"${1}\" rev-parse --show-${2}` c=${?} sh -c "'echo ${3} ${s:-./}; exit ${c}'" --

    from-top = ! git labeled-rev-parse-show \"${GIT_PREFIX}\" prefix
    to-top = ! git labeled-rev-parse-show \"${GIT_PREFIX}\" cdup
    top = ! git labeled-rev-parse-show \"${GIT_PREFIX}\" toplevel
    ws = ! t=`git top` c=${?} sh -c "'[ \"${c}\" -eq 0 -a -f \"${t}\"/.git ] || { echo ${t:-./}; exit ${c}; } && git -C .. top'"

    replace-prefixes = ! p=`git -C \"${GIT_PREFIX}\" to-top` sh -c 'git launch-in \"${GIT_PREFIX}\" \"${0}\" --src-prefix=${p} --dst-prefix=${p} \"${@}\"'

    lh   = ! git launch-in \"${GIT_PREFIX}\" log-with-header \"\"
    ls   = ! git launch-in \"${GIT_PREFIX}\" log-with-header \"%+s\"
    ln   = ! git launch-in \"${GIT_PREFIX}\" log-with-header \"%+s\" --name-status
    lr   = ! git launch-in \"${GIT_PREFIX}\" ln --relative
    lv   = ! git launch-in \"${GIT_PREFIX}\" log-with-header \"%+s%+b\" --name-status
    ll   = ! git launch-in \"${GIT_PREFIX}\" log-date-as \"%C(auto)%h %cd `git log-name-wrap [%cN]`%d %s\"

    lp   = ! git launch-in \"${GIT_PREFIX}\" replace-prefixes ls -p
    lpw  = ! git launch-in \"${GIT_PREFIX}\" lp --color-words

    lhf  = ! git launch-in \"${GIT_PREFIX}\" lh  --first-parent
    lsf  = ! git launch-in \"${GIT_PREFIX}\" ls  --first-parent
    lnf  = ! git launch-in \"${GIT_PREFIX}\" ln  --first-parent
    lrf  = ! git launch-in \"${GIT_PREFIX}\" lr  --first-parent
    lvf  = ! git launch-in \"${GIT_PREFIX}\" lv  --first-parent
    llf  = ! git launch-in \"${GIT_PREFIX}\" ll  --first-parent

    lpf  = ! git launch-in \"${GIT_PREFIX}\" lp  --first-parent
    lpwf = ! git launch-in \"${GIT_PREFIX}\" lpw --first-parent

    lhb  = ! git launch-in \"${GIT_PREFIX}\" lhf  `git branch-rev-range \"${@}\"` "#"
    lsb  = ! git launch-in \"${GIT_PREFIX}\" lsf  `git branch-rev-range \"${@}\"` "#"
    lnb  = ! git launch-in \"${GIT_PREFIX}\" lnf  `git branch-rev-range \"${@}\"` "#"
    lrb  = ! git launch-in \"${GIT_PREFIX}\" lrf  `git branch-rev-range \"${@}\"` "#"
    lvb  = ! git launch-in \"${GIT_PREFIX}\" lvf  `git branch-rev-range \"${@}\"` "#"
    llb  = ! git launch-in \"${GIT_PREFIX}\" llf  `git branch-rev-range \"${@}\"` "#"

    lpb  = ! git launch-in \"${GIT_PREFIX}\" lpf  `git branch-rev-range \"${@}\"` "#"
    lpwb = ! git launch-in \"${GIT_PREFIX}\" lpwf `git branch-rev-range \"${@}\"` "#"

    lg   = ! git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} log --graph --oneline --decorate --all
    llg  = ! git launch-in \"${GIT_PREFIX}\" ll --graph

    dd   = ! git launch-in \"${GIT_PREFIX}\" replace-prefixes ${__sk_visualize_sk__} diff
    ds   = ! git launch-in \"${GIT_PREFIX}\" dd --staged
    dn   = ! git launch-in \"${GIT_PREFIX}\" ${__sk_visualize_sk__} diff --name-status
    dr   = ! git launch-in \"${GIT_PREFIX}\" dn --relative

    ddw  = ! git launch-in \"${GIT_PREFIX}\" dd --color-words
    dsw  = ! git launch-in \"${GIT_PREFIX}\" ds --color-words

    dnb  = ! git launch-in \"${GIT_PREFIX}\" dn  `git branch-rev-range \"${@}\"` "#"
    drb  = ! git launch-in \"${GIT_PREFIX}\" dr  `git branch-rev-range \"${@}\"` "#"
    ddb  = ! git launch-in \"${GIT_PREFIX}\" dd  `git branch-rev-range \"${@}\"` "#"
    ddwb = ! git launch-in \"${GIT_PREFIX}\" ddw `git branch-rev-range \"${@}\"` "#"

    tt   = ! find . -maxdepth 5 -name .git -exec dirname {} "';'" | xargs -I{} sh -c "'git -C \"{}\" top \"##\" 1>&2; git -C \"{}\" \"${@}\"'" --
    uu   = ! ws=`git ws` && ${__sk_visualize_sk__:+echo} sh \"${ws}\"/scripts/update-worktrees
    wtt  = ! ws=`git ws` && ${__sk_visualize_sk__:+echo} git -C \"${ws}\" tt

    ww   = ! git ${__sk_visualize_sk__} worktree
    wwl  = ! git ww list
    wwa  = ! git ww add
    wwp  = ! git ww prune

    bb   = ! git ${__sk_visualize_sk__} branch
    bbr  = ! git bb -r --column=auto
    bbv  = ! git bb -vv

    bbs  = ! git branch -vv --color \"${@}\" | ruby -n -e '$_.scan(%r{^([*]?\\s*\\S+.*?)\\S+\\s+\\[(.*?) *: *(.*?)\\]}){|b,r,s|puts %q{%s %-12s %s}%[b,s,r]}' "#"
    bbsl = ! git bbs --no-color | ruby -ne "'puts $_.scan /^[*\\s]*(\\S+)/'" "#"
    bbc  = ! git branch -vv --color | grep '^[*] '

    svn-pull  = ! git svn rebase
    svn-push  = ! git svn dcommit
    svn-clone = ! git svn clone
