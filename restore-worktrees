#!/bin/sh
# vim: ft=sh: sw=2:

unset FORCE

main () {
  parse_command_line "${@}"

  root=`git ws 2>&5` || {
    error "Not a git workspace: `pwd`"
    exit 2
  }

  cd "${root}" && {
    run git worktree prune

    git branch | grep -v '^[*]' | while read line; do
      make_worktree ${line} || break
    done
  }
}

parse_command_line () {
  for option in "${@}"; do
    case "${option}" in
      --force | -f )
        FORCE=yes
      ;;

      --dry-run | -n )
        unset FORCE
      ;;

      --help | -h )
        usage_and_exit 0
      ;;

      *)
        usage_and_exit 3 "Unsupported parameter: ${option}"
      ;;
    esac
  done

  [ "${FORCE}" = yes ] || info "Simulation mode (dry-run), use --force for normal run"
}

usage_and_exit () {
  [ "${2:+set}" = set ] && error "${2}"

  usage "[--help | -h][--force | -f][--dry-run | -n]"
  exit "${1}"
}

make_worktree () {
    top=${1}/src

    [ -e "${top}" ] && {
      warning "Already exists: ${top}"
      return 0
    }

    run git worktree add "${top}" "${1}"
}

run () {
  _marker="${FORCE:+==}"
  echo "${_marker:-##} ${@}"

  [ "${FORCE}" = yes ] || return 0
  "${@}"
}

indent_output_from () {
  "${@}" 2>&1 | sed 's/^/  /'
}

info () {
  log INFO "${@}"
}

warning () {
  log WARNING "${@}"
}

error () {
  log ERROR "${@}"
}

log () {
  label=${1}
  shift

  echo "## ${script_name}: ${label}: ${@}" 1>&2
}

usage () {
  echo "USAGE: ${script_name} ${@}" 1>&2
}

exec 5>/dev/null
script_name=`basename "${0}"`

main "${@}"
